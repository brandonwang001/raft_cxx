// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft_rpc.proto

#include "raft_rpc.pb.h"
#include "raft_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace raft {

static const char* Raft_method_names[] = {
  "/raft.Raft/AppendEntries",
};

std::unique_ptr< Raft::Stub> Raft::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Raft::Stub> stub(new Raft::Stub(channel));
  return stub;
}

Raft::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(Raft_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Raft::Stub::AppendEntries(::grpc::ClientContext* context, const ::raft::AppendEntriesReq& request, ::raft::AppendEntriesResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void Raft::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::raft::AppendEntriesReq* request, ::raft::AppendEntriesResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void Raft::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft::AppendEntriesResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::raft::AppendEntriesResp>* Raft::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::AppendEntriesReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::AppendEntriesResp>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft::AppendEntriesResp>* Raft::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raft::AppendEntriesReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::raft::AppendEntriesResp>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

Raft::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Raft_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Raft::Service, ::raft::AppendEntriesReq, ::raft::AppendEntriesResp>(
          std::mem_fn(&Raft::Service::AppendEntries), this)));
}

Raft::Service::~Service() {
}

::grpc::Status Raft::Service::AppendEntries(::grpc::ServerContext* context, const ::raft::AppendEntriesReq* request, ::raft::AppendEntriesResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raft

